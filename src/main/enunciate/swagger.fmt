[#ftl]
[#-- @ftlvariable name="syntaxes" type="java.util.List<com.webcohesion.enunciate.api.datatype.Syntax>" --]
[#-- @ftlvariable name="apis" type="java.util.List<com.webcohesion.enunciate.api.resources.ResourceApi>" --]
[#-- @ftlvariable name="projectVersion" type="java.lang.String" --]
[#-- @ftlvariable name="projectTitle" type="java.lang.String" --]
[#-- @ftlvariable name="projectDescription" type="java.lang.String" --]
[#-- @ftlvariable name="termsOfService" type="java.lang.String" --]
[#-- @ftlvariable name="contact" type="com.webcohesion.enunciate.EnunciateConfiguration.Contact" --]
[#-- @ftlvariable name="license" type="com.webcohesion.enunciate.EnunciateConfiguration.License" --]
[#-- @ftlvariable name="host" type="java.lang.String" --]
[#-- @ftlvariable name="schemes" type="java.lang.String[]" --]
[#-- @ftlvariable name="basePath" type="java.lang.String" --]
[@file name="swagger.json" charset="utf-8"]
{
  "swagger": "2.0",
  "info" : {
  [#if projectDescription??]
    "description" : "${projectDescription?json_string}",
  [/#if]
  [#if termsOfService??]
    "termsOfService" : "${termsOfService?json_string}",
  [/#if]
  [#if contact?? && contact.name??]
    "contact" : {
    [#if contact.url??]
      "url" : "${contact.url}",
    [/#if]
    [#if contact.email??]
      "email" : "${contact.email}",
    [/#if]
      "name" : "${contact.name}"
    },
  [/#if]
  [#if license?? && license.name??]
    "license" : {
    [#if license.url??]
      "url" : "${license.url}",
    [/#if]
      "name" : "${license.name?json_string}"
    },
  [/#if]
    "version" : "${projectVersion!"0.0.0"}",
    "title" : "${projectTitle?json_string}"
  },
  [#if host??]
  "host" : "${host?json_string}",
  [/#if]
  [#if basePath??]
  "basePath" : "${basePath}",
  [/#if]
  [#if schemes??]
  "schemes" : [[#list schemes as scheme]"${scheme}"[#if scheme_has_next], [/#if][/#list]],
  [/#if]
  "tags" : [
  [#assign comma=false/]
  [#list apis as api]
    [#list api.resourceGroups as resourceGroup]
        [#if comma]
    ,
        [/#if]
        [#assign comma=true/]
    {
      "name" : "${resourceGroup.label?json_string}",
      "description" : "${(resourceGroup.description!"")?json_string}"
    }
    [/#list]
  [/#list]
  ],
  "definitions" : {
  [#assign comma=false/]
  [#list syntaxes as syntax]
    [#list syntax.namespaces as namespace]
      [#list namespace.types as dataType]
        [#if comma]
    ,
        [/#if]
        [#assign comma=true/]
    "${dataType.slug}" : {
      "type" : "${datatypeNameFor(dataType)}",
      "title" : "${dataType.label?json_string}",
        [#assign hasSupertype = (dataType.supertypes?? && dataType.supertypes?size > 0)/]
        [#if hasSupertype]
      "allOf" : [
          [#list dataType.supertypes?reverse as supertype]
            [#if supertype.slug??]
        {
          "$ref" : "#/definitions/${supertype.slug}"
        },
            [/#if]
          [/#list]
        {
        [/#if]
        [#if dataType.properties?? && dataType.properties?size > 0]
          "properties" : {
          [#list dataType.properties as property]
            "${property.name}" : {
            [#if property.namespaceInfo??]
              "xml" : {
              [#if property.wrapperName??]
                "name" : "${property.wrapperName}",
                "wrapped" : true,
              [/#if]
              [#if property.attribute!false]
                "attribute" : true,
              [/#if]
                "namespace" : "${property.namespace!""}"
              },
            [/#if]
            [@referenceDataType dataType=property.dataType description=(property.description!"")/]
            }[#if property_has_next],[/#if]
          [/#list]
          }[#if !hasSupertype],[/#if]
        [#elseif dataType.values?? && dataType.values?size > 0]
          "enum" : [
          [#list dataType.values as value]
            "${value.value?json_string}"[#if value_has_next],[/#if]
          [/#list]
          ][#if !hasSupertype],[/#if]
        [/#if]
        [#if hasSupertype]
        }
      ],
        [/#if]
      "description" : "${(dataType.description!"")?json_string}"
    }
      [/#list]
    [/#list]
  [/#list]
  },
  "paths": {
  [#assign comma=false/]
  [#list apis as api]
    [#list api.resourceGroups as resourceGroup]
      [#list resourceGroup.paths as path]
        [#if comma]
    ,
        [/#if]
        [#assign comma=true/]
        [#assign comma2=false/]
    "${path.path}" : {
        [#list resourceGroup.resources as resource]
          [#if resource.path = path.path]
            [#list resource.methods as method]
        [#if comma2]
      ,
        [/#if]
        [#assign comma2=true/]
      "${method.httpMethod?lower_case}" : {
        [#if resourceGroup.deprecated?? || method.deprecated??]
          "deprecated":true,
        [/#if]
        [#assign secRoles="" /]
        [#if method.annotations['com.bluejeans.services.security.Security']??]
        	[#assign security = method.annotations['com.bluejeans.services.security.Security'].elementValues/]
	    [#elseif resourceGroup.annotations['com.bluejeans.services.security.Security']??]
	        [#assign security = resourceGroup.annotations['com.bluejeans.services.security.Security'].elementValues/]
	    [#elseif resource.annotations['com.bluejeans.services.security.Security']??]
	        [#assign security = resource.annotations['com.bluejeans.services.security.Security'].elementValues/]
	    [/#if]
	[#if security??]
        "Security Roles":[#list security?values as value]
        		[#if value.value?is_sequence]
        			"[#list value.value as anno][#if anno?starts_with("com.bluejeans.services.security.Roles")] [#assign secRoles=secRoles + anno?keep_after_last(".") + "," /]${anno?keep_after_last(".")}[#if anno_has_next], [/#if][/#if][/#list]"
        		[#elseif value.value?starts_with("com.bluejeans.services.security.Roles")]
        			"${value.value?keep_after_last(".")}"
        			[#assign secRoles=secRoles  + value.value?keep_after_last(".")  + "," /]
        		[/#if]
        	[/#list],
        [/#if]
        "tags" : [ "${resourceGroup.label?json_string}" ],
        "description" : "Security Roles Allowed: ${secRoles?keep_before_last(",")} <br/>${(method.description!"")?json_string}",
        "operationId" : "${method.slug?json_string}",
              [#if method.requestEntity??]
        "consumes" : [ [#list method.requestEntity.mediaTypes as mediaType]"${mediaType.mediaType}"[#if mediaType_has_next], [/#if][/#list] ],
              [/#if]
              [#if method.responseEntity??]
        "produces" : [ [#list method.responseEntity.mediaTypes as mediaType]"${mediaType.mediaType}"[#if mediaType_has_next], [/#if][/#list] ],
              [/#if]
        "parameters" : [
              [#if method.parameters?? && method.parameters?size > 0]
                [#list validParametersOf(method) as parameter]
                  [#-- @ftlvariable name="parameter" type="com.webcohesion.enunciate.api.resources.Parameter" --]
          {
            "name" : "${parameter.name}",
            "in" : "${parameter.typeLabel}",
                  [#if parameter.defaultValue??]
            "default" : "${parameter.defaultValue}",
                  [/#if]
            "type" : "string",
            "description" : "${(parameter.description!"")?json_string}"
          }[#if parameter_has_next || method.requestEntity??],[/#if]
               [/#list]
              [/#if]
              [#if method.requestEntity??]
          {
            "name" : "body",
            "in" : "body",
                [#if findBestDataType(method.requestEntity)??]
            "schema" : {
                  [@referenceDataType dataType=findBestDataType(method.requestEntity)/]
            },
                [#else]
            "schema" : {
              "type" : "object"
            },
                [/#if]
            "description" : "${(method.requestEntity.description!"")?json_string}"
          }
              [/#if]
        ],
        "responses" : {
              [#list responsesOf(method) as response]
                [#-- @ftlvariable name="response" type="com.webcohesion.enunciate.modules.swagger.SwaggerResponse" --]
          "${response.code}" : {
                [#if response.dataType??]
            "schema" : {
                  [@referenceDataType dataType=response.dataType/]
            },
                [/#if]
            "headers" : {
                [#list response.headers as header]
              "${header.name}" : {
                "description" : "${(header.description!"")?json_string}",
                "type" : "string"
              }[#if header_has_next],[/#if]
                [/#list]
            },
            "description" : "${(response.description!"")?json_string}"
          },
              [/#list]
          "default" : {
            "description" : "Unexpected error."
          }
        }
      }
            [/#list]
          [/#if]
        [/#list]
    }
      [/#list]
    [/#list]
  [/#list]
  }
}
[/@file]
[#macro referenceDataType dataType description=""]
  [#-- @ftlvariable name="dataType" type="com.webcohesion.enunciate.api.datatype.DataTypeReference" --]
  [#if dataType.value??]
"description" : "${description?json_string}",
    [#if dataType.containers?? && dataType.containers?size > 0]
      [#list dataType.containers as container]
"type" : "array",
"items" : {
        [#if !container_has_next]
  "$ref" : "#/definitions/${dataType.slug}"
        [/#if]
      [/#list]
      [#list dataType.containers as container]
}
      [/#list]
    [#else]
"$ref" : "#/definitions/${dataType.slug}"
    [/#if]
  [#elseif dataType.containers?? && dataType.containers?size > 0]
"description" : "${description?json_string}",
    [#list dataType.containers as container]
"type" : "array",
"items" : {
     [#if !container_has_next]
  "type" : "${datatypeNameFor(dataType)}"
     [/#if]
    [/#list]
    [#list dataType.containers as container]
}
    [/#list]
  [#else]

  [/#if]
[/#macro]
